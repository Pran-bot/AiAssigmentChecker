version: '3.8'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  api:
    build: ./api
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app  # ðŸ‘ˆ Mount your local code inside the container  
      - /app/node_modules
  worker-1:
    build: ./api
    env_file:
      - .env
    depends_on:
      - redis
    command: ["npm", "run", "workerdev"]
    volumes:
      - ./api:/app
      - /app/node_modules

  worker-2:
    build: ./api
    env_file:
      - .env
    depends_on:
      - redis
    command: ["npm", "run", "workerdev"]
    volumes:
      - ./api:/app
      - /app/node_modules

  python_api:
    build: ./python_api
    env_file:
      - .env
    depends_on:
      - redis
    ports:
      - "8000:8000"
    volumes:
      - ./python_api:/code/app/
      - /code/app/venv
    
     
  nginx:
    image: nginx:latest
    container_name: nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # âœ… Production NGINX config
      - ./nginx/prod.conf:/etc/nginx/nginx.conf:ro

      # âœ… ACME challenge + Certbot persistence
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt

    depends_on:
      - api
      - python_api
    extra_hosts:
      - "host.docker.internal:host-gateway"


  # certbot:
  #   image: certbot/certbot
  #   volumes:
  #     - ./certbot/www:/var/www/certbot
  #     - ./certbot/conf:/etc/letsencrypt
  #   entrypoint: >
  #     sh -c "trap exit TERM;
  #     while :; do
  #       certbot renew --webroot -w /var/www/certbot --quiet --agree-tos &&
  #       nginx -s reload;
  #       sleep 12h;
  #     done"